// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notepad.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notepad_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notepad_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notepad_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notepad_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_notepad_2eproto;
class Content;
struct ContentDefaultTypeInternal;
extern ContentDefaultTypeInternal _Content_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class Users;
struct UsersDefaultTypeInternal;
extern UsersDefaultTypeInternal _Users_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
class Versions;
struct VersionsDefaultTypeInternal;
extern VersionsDefaultTypeInternal _Versions_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Content* Arena::CreateMaybeMessage<::Content>(Arena*);
template<> ::Operation* Arena::CreateMaybeMessage<::Operation>(Arena*);
template<> ::Project* Arena::CreateMaybeMessage<::Project>(Arena*);
template<> ::User* Arena::CreateMaybeMessage<::User>(Arena*);
template<> ::Users* Arena::CreateMaybeMessage<::Users>(Arena*);
template<> ::Version* Arena::CreateMaybeMessage<::Version>(Arena*);
template<> ::Versions* Arena::CreateMaybeMessage<::Versions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kLocationFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string location = 5;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notepad_2eproto;
};
// -------------------------------------------------------------------

class Users final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Users) */ {
 public:
  inline Users() : Users(nullptr) {}
  ~Users() override;
  explicit PROTOBUF_CONSTEXPR Users(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Users(const Users& from);
  Users(Users&& from) noexcept
    : Users() {
    *this = ::std::move(from);
  }

  inline Users& operator=(const Users& from) {
    CopyFrom(from);
    return *this;
  }
  inline Users& operator=(Users&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Users& default_instance() {
    return *internal_default_instance();
  }
  static inline const Users* internal_default_instance() {
    return reinterpret_cast<const Users*>(
               &_Users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Users& a, Users& b) {
    a.Swap(&b);
  }
  inline void Swap(Users* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Users* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Users* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Users>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Users& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Users& from) {
    Users::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Users* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Users";
  }
  protected:
  explicit Users(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >*
      mutable_users();
  private:
  const ::User& _internal_users(int index) const;
  ::User* _internal_add_users();
  public:
  const ::User& users(int index) const;
  ::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >&
      users() const;

  // @@protoc_insertion_point(class_scope:Users)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User > users_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notepad_2eproto;
};
// -------------------------------------------------------------------

class Content final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Content) */ {
 public:
  inline Content() : Content(nullptr) {}
  ~Content() override;
  explicit PROTOBUF_CONSTEXPR Content(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Content(const Content& from);
  Content(Content&& from) noexcept
    : Content() {
    *this = ::std::move(from);
  }

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Content& operator=(Content&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Content& default_instance() {
    return *internal_default_instance();
  }
  static inline const Content* internal_default_instance() {
    return reinterpret_cast<const Content*>(
               &_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Content& a, Content& b) {
    a.Swap(&b);
  }
  inline void Swap(Content* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Content* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Content>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Content& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Content& from) {
    Content::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Content* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Content";
  }
  protected:
  explicit Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
  };
  // string line = 1;
  void clear_line();
  const std::string& line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line();
  PROTOBUF_NODISCARD std::string* release_line();
  void set_allocated_line(std::string* line);
  private:
  const std::string& _internal_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line(const std::string& value);
  std::string* _internal_mutable_line();
  public:

  // @@protoc_insertion_point(class_scope:Content)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notepad_2eproto;
};
// -------------------------------------------------------------------

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit PROTOBUF_CONSTEXPR Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Project& from) {
    Project::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 4,
    kProjectIdFieldNumber = 1,
    kUserIDFieldNumber = 2,
    kProjectNameFieldNumber = 3,
  };
  // repeated .Content contents = 4;
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::Content* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content >*
      mutable_contents();
  private:
  const ::Content& _internal_contents(int index) const;
  ::Content* _internal_add_contents();
  public:
  const ::Content& contents(int index) const;
  ::Content* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content >&
      contents() const;

  // string projectId = 1;
  void clear_projectid();
  const std::string& projectid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectid();
  PROTOBUF_NODISCARD std::string* release_projectid();
  void set_allocated_projectid(std::string* projectid);
  private:
  const std::string& _internal_projectid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectid(const std::string& value);
  std::string* _internal_mutable_projectid();
  public:

  // string userID = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string projectName = 3;
  void clear_projectname();
  const std::string& projectname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectname();
  PROTOBUF_NODISCARD std::string* release_projectname();
  void set_allocated_projectname(std::string* projectname);
  private:
  const std::string& _internal_projectname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectname(const std::string& value);
  std::string* _internal_mutable_projectname();
  public:

  // @@protoc_insertion_point(class_scope:Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content > contents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notepad_2eproto;
};
// -------------------------------------------------------------------

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit PROTOBUF_CONSTEXPR Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Operation& from) {
    Operation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 4,
    kOperationTypeFieldNumber = 1,
    kStartLineFieldNumber = 2,
    kEndLineFieldNumber = 3,
  };
  // repeated .Content contents = 4;
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::Content* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content >*
      mutable_contents();
  private:
  const ::Content& _internal_contents(int index) const;
  ::Content* _internal_add_contents();
  public:
  const ::Content& contents(int index) const;
  ::Content* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content >&
      contents() const;

  // string operationType = 1;
  void clear_operationtype();
  const std::string& operationtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operationtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operationtype();
  PROTOBUF_NODISCARD std::string* release_operationtype();
  void set_allocated_operationtype(std::string* operationtype);
  private:
  const std::string& _internal_operationtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operationtype(const std::string& value);
  std::string* _internal_mutable_operationtype();
  public:

  // int32 startLine = 2;
  void clear_startline();
  int32_t startline() const;
  void set_startline(int32_t value);
  private:
  int32_t _internal_startline() const;
  void _internal_set_startline(int32_t value);
  public:

  // int32 endLine = 3;
  void clear_endline();
  int32_t endline() const;
  void set_endline(int32_t value);
  private:
  int32_t _internal_endline() const;
  void _internal_set_endline(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content > contents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operationtype_;
    int32_t startline_;
    int32_t endline_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notepad_2eproto;
};
// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 3,
    kVersionIDFieldNumber = 1,
    kCreatedTimeFieldNumber = 2,
  };
  // repeated .Operation operation = 3;
  int operation_size() const;
  private:
  int _internal_operation_size() const;
  public:
  void clear_operation();
  ::Operation* mutable_operation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Operation >*
      mutable_operation();
  private:
  const ::Operation& _internal_operation(int index) const;
  ::Operation* _internal_add_operation();
  public:
  const ::Operation& operation(int index) const;
  ::Operation* add_operation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Operation >&
      operation() const;

  // string versionID = 1;
  void clear_versionid();
  const std::string& versionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_versionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_versionid();
  PROTOBUF_NODISCARD std::string* release_versionid();
  void set_allocated_versionid(std::string* versionid);
  private:
  const std::string& _internal_versionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_versionid(const std::string& value);
  std::string* _internal_mutable_versionid();
  public:

  // string createdTime = 2;
  void clear_createdtime();
  const std::string& createdtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createdtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createdtime();
  PROTOBUF_NODISCARD std::string* release_createdtime();
  void set_allocated_createdtime(std::string* createdtime);
  private:
  const std::string& _internal_createdtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdtime(const std::string& value);
  std::string* _internal_mutable_createdtime();
  public:

  // @@protoc_insertion_point(class_scope:Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Operation > operation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versionid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notepad_2eproto;
};
// -------------------------------------------------------------------

class Versions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Versions) */ {
 public:
  inline Versions() : Versions(nullptr) {}
  ~Versions() override;
  explicit PROTOBUF_CONSTEXPR Versions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Versions(const Versions& from);
  Versions(Versions&& from) noexcept
    : Versions() {
    *this = ::std::move(from);
  }

  inline Versions& operator=(const Versions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Versions& operator=(Versions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Versions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Versions* internal_default_instance() {
    return reinterpret_cast<const Versions*>(
               &_Versions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Versions& a, Versions& b) {
    a.Swap(&b);
  }
  inline void Swap(Versions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Versions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Versions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Versions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Versions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Versions& from) {
    Versions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Versions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Versions";
  }
  protected:
  explicit Versions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 3,
    kProjectIDFieldNumber = 1,
  };
  // repeated .Version versions = 3;
  int versions_size() const;
  private:
  int _internal_versions_size() const;
  public:
  void clear_versions();
  ::Version* mutable_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version >*
      mutable_versions();
  private:
  const ::Version& _internal_versions(int index) const;
  ::Version* _internal_add_versions();
  public:
  const ::Version& versions(int index) const;
  ::Version* add_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version >&
      versions() const;

  // string projectID = 1;
  void clear_projectid();
  const std::string& projectid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectid();
  PROTOBUF_NODISCARD std::string* release_projectid();
  void set_allocated_projectid(std::string* projectid);
  private:
  const std::string& _internal_projectid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectid(const std::string& value);
  std::string* _internal_mutable_projectid();
  public:

  // @@protoc_insertion_point(class_scope:Versions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version > versions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notepad_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string name = 1;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.name)
}

// string username = 2;
inline void User::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:User.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.username)
}
inline std::string* User::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:User.username)
  return _s;
}
inline const std::string& User::_internal_username() const {
  return _impl_.username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:User.username)
  return _impl_.username_.Release();
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.username)
}

// string email = 3;
inline void User::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& User::email() const {
  // @@protoc_insertion_point(field_get:User.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.email)
}
inline std::string* User::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:User.email)
  return _s;
}
inline const std::string& User::_internal_email() const {
  return _impl_.email_.Get();
}
inline void User::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:User.email)
  return _impl_.email_.Release();
}
inline void User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.email)
}

// string password = 4;
inline void User::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:User.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.password)
}
inline std::string* User::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:User.password)
  return _s;
}
inline const std::string& User::_internal_password() const {
  return _impl_.password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:User.password)
  return _impl_.password_.Release();
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.password)
}

// string location = 5;
inline void User::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& User::location() const {
  // @@protoc_insertion_point(field_get:User.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.location)
}
inline std::string* User::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:User.location)
  return _s;
}
inline const std::string& User::_internal_location() const {
  return _impl_.location_.Get();
}
inline void User::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_location() {
  // @@protoc_insertion_point(field_release:User.location)
  return _impl_.location_.Release();
}
inline void User::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.location)
}

// -------------------------------------------------------------------

// Users

// repeated .User users = 1;
inline int Users::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int Users::users_size() const {
  return _internal_users_size();
}
inline void Users::clear_users() {
  _impl_.users_.Clear();
}
inline ::User* Users::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:Users.users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >*
Users::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:Users.users)
  return &_impl_.users_;
}
inline const ::User& Users::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::User& Users::users(int index) const {
  // @@protoc_insertion_point(field_get:Users.users)
  return _internal_users(index);
}
inline ::User* Users::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::User* Users::add_users() {
  ::User* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:Users.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >&
Users::users() const {
  // @@protoc_insertion_point(field_list:Users.users)
  return _impl_.users_;
}

// -------------------------------------------------------------------

// Content

// string line = 1;
inline void Content::clear_line() {
  _impl_.line_.ClearToEmpty();
}
inline const std::string& Content::line() const {
  // @@protoc_insertion_point(field_get:Content.line)
  return _internal_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Content::set_line(ArgT0&& arg0, ArgT... args) {
 
 _impl_.line_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Content.line)
}
inline std::string* Content::mutable_line() {
  std::string* _s = _internal_mutable_line();
  // @@protoc_insertion_point(field_mutable:Content.line)
  return _s;
}
inline const std::string& Content::_internal_line() const {
  return _impl_.line_.Get();
}
inline void Content::_internal_set_line(const std::string& value) {
  
  _impl_.line_.Set(value, GetArenaForAllocation());
}
inline std::string* Content::_internal_mutable_line() {
  
  return _impl_.line_.Mutable(GetArenaForAllocation());
}
inline std::string* Content::release_line() {
  // @@protoc_insertion_point(field_release:Content.line)
  return _impl_.line_.Release();
}
inline void Content::set_allocated_line(std::string* line) {
  if (line != nullptr) {
    
  } else {
    
  }
  _impl_.line_.SetAllocated(line, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.line_.IsDefault()) {
    _impl_.line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Content.line)
}

// -------------------------------------------------------------------

// Project

// string projectId = 1;
inline void Project::clear_projectid() {
  _impl_.projectid_.ClearToEmpty();
}
inline const std::string& Project::projectid() const {
  // @@protoc_insertion_point(field_get:Project.projectId)
  return _internal_projectid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_projectid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.projectid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.projectId)
}
inline std::string* Project::mutable_projectid() {
  std::string* _s = _internal_mutable_projectid();
  // @@protoc_insertion_point(field_mutable:Project.projectId)
  return _s;
}
inline const std::string& Project::_internal_projectid() const {
  return _impl_.projectid_.Get();
}
inline void Project::_internal_set_projectid(const std::string& value) {
  
  _impl_.projectid_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_projectid() {
  
  return _impl_.projectid_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_projectid() {
  // @@protoc_insertion_point(field_release:Project.projectId)
  return _impl_.projectid_.Release();
}
inline void Project::set_allocated_projectid(std::string* projectid) {
  if (projectid != nullptr) {
    
  } else {
    
  }
  _impl_.projectid_.SetAllocated(projectid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectid_.IsDefault()) {
    _impl_.projectid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Project.projectId)
}

// string userID = 2;
inline void Project::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& Project::userid() const {
  // @@protoc_insertion_point(field_get:Project.userID)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_userid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.userID)
}
inline std::string* Project::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Project.userID)
  return _s;
}
inline const std::string& Project::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void Project::_internal_set_userid(const std::string& value) {
  
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_userid() {
  
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_userid() {
  // @@protoc_insertion_point(field_release:Project.userID)
  return _impl_.userid_.Release();
}
inline void Project::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Project.userID)
}

// string projectName = 3;
inline void Project::clear_projectname() {
  _impl_.projectname_.ClearToEmpty();
}
inline const std::string& Project::projectname() const {
  // @@protoc_insertion_point(field_get:Project.projectName)
  return _internal_projectname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_projectname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.projectname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.projectName)
}
inline std::string* Project::mutable_projectname() {
  std::string* _s = _internal_mutable_projectname();
  // @@protoc_insertion_point(field_mutable:Project.projectName)
  return _s;
}
inline const std::string& Project::_internal_projectname() const {
  return _impl_.projectname_.Get();
}
inline void Project::_internal_set_projectname(const std::string& value) {
  
  _impl_.projectname_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_projectname() {
  
  return _impl_.projectname_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_projectname() {
  // @@protoc_insertion_point(field_release:Project.projectName)
  return _impl_.projectname_.Release();
}
inline void Project::set_allocated_projectname(std::string* projectname) {
  if (projectname != nullptr) {
    
  } else {
    
  }
  _impl_.projectname_.SetAllocated(projectname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectname_.IsDefault()) {
    _impl_.projectname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Project.projectName)
}

// repeated .Content contents = 4;
inline int Project::_internal_contents_size() const {
  return _impl_.contents_.size();
}
inline int Project::contents_size() const {
  return _internal_contents_size();
}
inline void Project::clear_contents() {
  _impl_.contents_.Clear();
}
inline ::Content* Project::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:Project.contents)
  return _impl_.contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content >*
Project::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:Project.contents)
  return &_impl_.contents_;
}
inline const ::Content& Project::_internal_contents(int index) const {
  return _impl_.contents_.Get(index);
}
inline const ::Content& Project::contents(int index) const {
  // @@protoc_insertion_point(field_get:Project.contents)
  return _internal_contents(index);
}
inline ::Content* Project::_internal_add_contents() {
  return _impl_.contents_.Add();
}
inline ::Content* Project::add_contents() {
  ::Content* _add = _internal_add_contents();
  // @@protoc_insertion_point(field_add:Project.contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content >&
Project::contents() const {
  // @@protoc_insertion_point(field_list:Project.contents)
  return _impl_.contents_;
}

// -------------------------------------------------------------------

// Operation

// string operationType = 1;
inline void Operation::clear_operationtype() {
  _impl_.operationtype_.ClearToEmpty();
}
inline const std::string& Operation::operationtype() const {
  // @@protoc_insertion_point(field_get:Operation.operationType)
  return _internal_operationtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_operationtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.operationtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Operation.operationType)
}
inline std::string* Operation::mutable_operationtype() {
  std::string* _s = _internal_mutable_operationtype();
  // @@protoc_insertion_point(field_mutable:Operation.operationType)
  return _s;
}
inline const std::string& Operation::_internal_operationtype() const {
  return _impl_.operationtype_.Get();
}
inline void Operation::_internal_set_operationtype(const std::string& value) {
  
  _impl_.operationtype_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_operationtype() {
  
  return _impl_.operationtype_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_operationtype() {
  // @@protoc_insertion_point(field_release:Operation.operationType)
  return _impl_.operationtype_.Release();
}
inline void Operation::set_allocated_operationtype(std::string* operationtype) {
  if (operationtype != nullptr) {
    
  } else {
    
  }
  _impl_.operationtype_.SetAllocated(operationtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operationtype_.IsDefault()) {
    _impl_.operationtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Operation.operationType)
}

// int32 startLine = 2;
inline void Operation::clear_startline() {
  _impl_.startline_ = 0;
}
inline int32_t Operation::_internal_startline() const {
  return _impl_.startline_;
}
inline int32_t Operation::startline() const {
  // @@protoc_insertion_point(field_get:Operation.startLine)
  return _internal_startline();
}
inline void Operation::_internal_set_startline(int32_t value) {
  
  _impl_.startline_ = value;
}
inline void Operation::set_startline(int32_t value) {
  _internal_set_startline(value);
  // @@protoc_insertion_point(field_set:Operation.startLine)
}

// int32 endLine = 3;
inline void Operation::clear_endline() {
  _impl_.endline_ = 0;
}
inline int32_t Operation::_internal_endline() const {
  return _impl_.endline_;
}
inline int32_t Operation::endline() const {
  // @@protoc_insertion_point(field_get:Operation.endLine)
  return _internal_endline();
}
inline void Operation::_internal_set_endline(int32_t value) {
  
  _impl_.endline_ = value;
}
inline void Operation::set_endline(int32_t value) {
  _internal_set_endline(value);
  // @@protoc_insertion_point(field_set:Operation.endLine)
}

// repeated .Content contents = 4;
inline int Operation::_internal_contents_size() const {
  return _impl_.contents_.size();
}
inline int Operation::contents_size() const {
  return _internal_contents_size();
}
inline void Operation::clear_contents() {
  _impl_.contents_.Clear();
}
inline ::Content* Operation::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:Operation.contents)
  return _impl_.contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content >*
Operation::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:Operation.contents)
  return &_impl_.contents_;
}
inline const ::Content& Operation::_internal_contents(int index) const {
  return _impl_.contents_.Get(index);
}
inline const ::Content& Operation::contents(int index) const {
  // @@protoc_insertion_point(field_get:Operation.contents)
  return _internal_contents(index);
}
inline ::Content* Operation::_internal_add_contents() {
  return _impl_.contents_.Add();
}
inline ::Content* Operation::add_contents() {
  ::Content* _add = _internal_add_contents();
  // @@protoc_insertion_point(field_add:Operation.contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Content >&
Operation::contents() const {
  // @@protoc_insertion_point(field_list:Operation.contents)
  return _impl_.contents_;
}

// -------------------------------------------------------------------

// Version

// string versionID = 1;
inline void Version::clear_versionid() {
  _impl_.versionid_.ClearToEmpty();
}
inline const std::string& Version::versionid() const {
  // @@protoc_insertion_point(field_get:Version.versionID)
  return _internal_versionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_versionid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.versionid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Version.versionID)
}
inline std::string* Version::mutable_versionid() {
  std::string* _s = _internal_mutable_versionid();
  // @@protoc_insertion_point(field_mutable:Version.versionID)
  return _s;
}
inline const std::string& Version::_internal_versionid() const {
  return _impl_.versionid_.Get();
}
inline void Version::_internal_set_versionid(const std::string& value) {
  
  _impl_.versionid_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_versionid() {
  
  return _impl_.versionid_.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_versionid() {
  // @@protoc_insertion_point(field_release:Version.versionID)
  return _impl_.versionid_.Release();
}
inline void Version::set_allocated_versionid(std::string* versionid) {
  if (versionid != nullptr) {
    
  } else {
    
  }
  _impl_.versionid_.SetAllocated(versionid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.versionid_.IsDefault()) {
    _impl_.versionid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Version.versionID)
}

// string createdTime = 2;
inline void Version::clear_createdtime() {
  _impl_.createdtime_.ClearToEmpty();
}
inline const std::string& Version::createdtime() const {
  // @@protoc_insertion_point(field_get:Version.createdTime)
  return _internal_createdtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_createdtime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.createdtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Version.createdTime)
}
inline std::string* Version::mutable_createdtime() {
  std::string* _s = _internal_mutable_createdtime();
  // @@protoc_insertion_point(field_mutable:Version.createdTime)
  return _s;
}
inline const std::string& Version::_internal_createdtime() const {
  return _impl_.createdtime_.Get();
}
inline void Version::_internal_set_createdtime(const std::string& value) {
  
  _impl_.createdtime_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_createdtime() {
  
  return _impl_.createdtime_.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_createdtime() {
  // @@protoc_insertion_point(field_release:Version.createdTime)
  return _impl_.createdtime_.Release();
}
inline void Version::set_allocated_createdtime(std::string* createdtime) {
  if (createdtime != nullptr) {
    
  } else {
    
  }
  _impl_.createdtime_.SetAllocated(createdtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createdtime_.IsDefault()) {
    _impl_.createdtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Version.createdTime)
}

// repeated .Operation operation = 3;
inline int Version::_internal_operation_size() const {
  return _impl_.operation_.size();
}
inline int Version::operation_size() const {
  return _internal_operation_size();
}
inline void Version::clear_operation() {
  _impl_.operation_.Clear();
}
inline ::Operation* Version::mutable_operation(int index) {
  // @@protoc_insertion_point(field_mutable:Version.operation)
  return _impl_.operation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Operation >*
Version::mutable_operation() {
  // @@protoc_insertion_point(field_mutable_list:Version.operation)
  return &_impl_.operation_;
}
inline const ::Operation& Version::_internal_operation(int index) const {
  return _impl_.operation_.Get(index);
}
inline const ::Operation& Version::operation(int index) const {
  // @@protoc_insertion_point(field_get:Version.operation)
  return _internal_operation(index);
}
inline ::Operation* Version::_internal_add_operation() {
  return _impl_.operation_.Add();
}
inline ::Operation* Version::add_operation() {
  ::Operation* _add = _internal_add_operation();
  // @@protoc_insertion_point(field_add:Version.operation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Operation >&
Version::operation() const {
  // @@protoc_insertion_point(field_list:Version.operation)
  return _impl_.operation_;
}

// -------------------------------------------------------------------

// Versions

// string projectID = 1;
inline void Versions::clear_projectid() {
  _impl_.projectid_.ClearToEmpty();
}
inline const std::string& Versions::projectid() const {
  // @@protoc_insertion_point(field_get:Versions.projectID)
  return _internal_projectid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Versions::set_projectid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.projectid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Versions.projectID)
}
inline std::string* Versions::mutable_projectid() {
  std::string* _s = _internal_mutable_projectid();
  // @@protoc_insertion_point(field_mutable:Versions.projectID)
  return _s;
}
inline const std::string& Versions::_internal_projectid() const {
  return _impl_.projectid_.Get();
}
inline void Versions::_internal_set_projectid(const std::string& value) {
  
  _impl_.projectid_.Set(value, GetArenaForAllocation());
}
inline std::string* Versions::_internal_mutable_projectid() {
  
  return _impl_.projectid_.Mutable(GetArenaForAllocation());
}
inline std::string* Versions::release_projectid() {
  // @@protoc_insertion_point(field_release:Versions.projectID)
  return _impl_.projectid_.Release();
}
inline void Versions::set_allocated_projectid(std::string* projectid) {
  if (projectid != nullptr) {
    
  } else {
    
  }
  _impl_.projectid_.SetAllocated(projectid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectid_.IsDefault()) {
    _impl_.projectid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Versions.projectID)
}

// repeated .Version versions = 3;
inline int Versions::_internal_versions_size() const {
  return _impl_.versions_.size();
}
inline int Versions::versions_size() const {
  return _internal_versions_size();
}
inline void Versions::clear_versions() {
  _impl_.versions_.Clear();
}
inline ::Version* Versions::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:Versions.versions)
  return _impl_.versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version >*
Versions::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:Versions.versions)
  return &_impl_.versions_;
}
inline const ::Version& Versions::_internal_versions(int index) const {
  return _impl_.versions_.Get(index);
}
inline const ::Version& Versions::versions(int index) const {
  // @@protoc_insertion_point(field_get:Versions.versions)
  return _internal_versions(index);
}
inline ::Version* Versions::_internal_add_versions() {
  return _impl_.versions_.Add();
}
inline ::Version* Versions::add_versions() {
  ::Version* _add = _internal_add_versions();
  // @@protoc_insertion_point(field_add:Versions.versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Version >&
Versions::versions() const {
  // @@protoc_insertion_point(field_list:Versions.versions)
  return _impl_.versions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notepad_2eproto
